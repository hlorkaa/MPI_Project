package com.example.MPI_Project.interface_tests;// Generated by Selenium IDE

import com.example.MPI_Project.testHelpers.AuthTestHelper;
import com.example.MPI_Project.testHelpers.TestUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class ConsultantInterfaceTest {
    private WebDriver driver;

    @Before
    public void setUp() {
        driver = TestUtils.getDriver();
        AuthTestHelper.auth(driver,"consultant", "consultant");
    }

    @After
    public void tearDown() {
        driver.findElement(By.name("exitButton")).click();
        driver.findElement(By.name("task_logoutButton")).click();
        driver.findElement(By.name("exitButton")).click();
        driver.quit();
    }

    @Test
    public void basicInterfaceTest() {
        driver.findElement(By.name("task_conButton")).click();
        driver.findElement(By.cssSelector("tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1)")).click();
        assertThat(driver.findElement(By.cssSelector("tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1)")).getText(), is("Консультант"));
        {
            String value = driver.findElement(By.name("exitButton")).getAttribute("value");
            assertThat(value, is("Выход"));
        }
        driver.findElement(By.cssSelector("tr:nth-child(2) > td")).click();
        assertThat(driver.findElement(By.cssSelector("td > strong")).getText(), is("Текущие заказы"));
        {
            String value = driver.findElement(By.cssSelector("form:nth-child(2) > input")).getAttribute("value");
            assertThat(value, is("<-"));
        }
        {
            String value = driver.findElement(By.cssSelector("form:nth-child(3) > input")).getAttribute("value");
            assertThat(value, is("->"));
        }
        driver.findElement(By.cssSelector("th:nth-child(1)")).click();
        assertThat(driver.findElement(By.cssSelector("th:nth-child(1)")).getText(), is("ИД"));
        driver.findElement(By.cssSelector("th:nth-child(2)")).click();
        assertThat(driver.findElement(By.cssSelector("th:nth-child(2)")).getText(), is("Наименование"));
        driver.findElement(By.cssSelector("th:nth-child(3)")).click();
        assertThat(driver.findElement(By.cssSelector("th:nth-child(3)")).getText(), is("Заказчик"));
        driver.findElement(By.cssSelector("tr > .colOrder:nth-child(2)")).click();
        assertThat(driver.findElement(By.cssSelector("span")).getText(), is("Отредактированный заказ"));
        driver.findElement(By.cssSelector("i")).click();
        assertThat(driver.findElement(By.cssSelector("i")).getText(), is("Петров П.П."));
        assertThat(driver.findElement(By.name("order_deleteButton")).getText(), is("Удалить"));
        assertThat(driver.findElement(By.name("order_changeButton")).getText(), is("Просмотр и редактирование"));
        }

    @Test
    public void createOrderInterfaceTest() {
        driver.findElement(By.name("task_conButton")).click();
        driver.findElement(By.cssSelector("td:nth-child(2) > p")).click();
        assertThat(driver.findElement(By.cssSelector("td:nth-child(2) strong")).getText(), is("Новый заказ"));
        driver.findElement(By.cssSelector("tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(2)")).click();
        assertThat(driver.findElement(By.cssSelector("td:nth-child(2) p:nth-child(2)")).getText(), is("Дата: Дедлайн:"));
        {
            WebElement element = driver.findElement(By.name("newOrder_name"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            WebElement element = driver.findElement(By.name("newOrder_customer"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            WebElement element = driver.findElement(By.name("newOrder_date"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertFalse(isEditable);
        }
        {
            WebElement element = driver.findElement(By.name("newOrder_deadline"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        assertThat(driver.findElement(By.cssSelector("td:nth-child(2) label:nth-child(2)")).getText(), is("Техническое"));
        assertFalse(driver.findElement(By.name("newOrder_quality")).isSelected());
        assertThat(driver.findElement(By.cssSelector("td:nth-child(2) label:nth-child(4)")).getText(), is("Обычное"));
        assertTrue(driver.findElement(By.cssSelector("td:nth-child(2) #orderQuality_mid")).isSelected());
        assertThat(driver.findElement(By.cssSelector("td:nth-child(2) label:nth-child(6)")).getText(), is("Высококачественное"));
        assertFalse(driver.findElement(By.cssSelector("td:nth-child(2) #orderQuality_top")).isSelected());
        {
            WebElement element = driver.findElement(By.name("newOrder_quantity"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            WebElement element = driver.findElement(By.name("newOrder_notes"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            String value = driver.findElement(By.cssSelector("td:nth-child(2) p:nth-child(6) > input:nth-child(1)")).getAttribute("value");
            assertThat(value, is("ОК"));
        }
        {
            String value = driver.findElement(By.cssSelector("p:nth-child(6) > input:nth-child(2)")).getAttribute("value");
            assertThat(value, is("Отмена"));
        }
    }

    @Test
    public void editOrderInterfaceTest() {
        driver.findElement(By.name("task_conButton")).click();
        driver.findElement(By.name("order_changeButton")).click();
        driver.findElement(By.name("order_name")).click();
        driver.findElement(By.cssSelector("td:nth-child(1) > p")).click();
        assertThat(driver.findElement(By.cssSelector("td:nth-child(1) > p > strong")).getText(), is("Редактировать заказ"));
        driver.findElement(By.name("order_name")).click();
        {
            String value = driver.findElement(By.name("order_name")).getAttribute("value");
            assertThat(value, is("Отредактированный заказ"));
        }
        driver.findElement(By.name("order_customer")).click();
        {
            String value = driver.findElement(By.name("order_customer")).getAttribute("value");
            assertThat(value, is("Петров П.П."));
        }
        driver.findElement(By.name("order_date")).click();
        assertThat(driver.findElement(By.cssSelector("td:nth-child(1) p:nth-child(2)")).getText(), is("Дата: Дедлайн:"));
        {
            String value = driver.findElement(By.name("order_date")).getAttribute("value");
            assertThat(value, is("2021-12-05"));
        }
        assertThat(driver.findElement(By.cssSelector("td:nth-child(1) label:nth-child(2)")).getText(), is("Техническое"));
        assertFalse(driver.findElement(By.id("orderQuality_low")).isSelected());
        assertThat(driver.findElement(By.cssSelector("td:nth-child(1) label:nth-child(4)")).getText(), is("Обычное"));
        assertTrue(driver.findElement(By.id("orderQuality_mid")).isSelected());
        assertThat(driver.findElement(By.cssSelector("td:nth-child(1) label:nth-child(6)")).getText(), is("Высококачественное"));
        assertFalse(driver.findElement(By.id("orderQuality_top")).isSelected());
        {
            String value = driver.findElement(By.name("order_quantity")).getAttribute("value");
            assertThat(value, is("100"));
        }
        driver.findElement(By.name("order_notes")).click();
        {
            String value = driver.findElement(By.name("order_notes")).getAttribute("value");
            assertThat(value, is("Отредактированное описание тестового заказа."));
        }
        {
            WebElement element = driver.findElement(By.name("order_name"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            WebElement element = driver.findElement(By.name("order_customer"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            WebElement element = driver.findElement(By.name("order_date"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertFalse(isEditable);
        }
        {
            WebElement element = driver.findElement(By.name("order_quantity"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            WebElement element = driver.findElement(By.name("order_notes"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            String value = driver.findElement(By.cssSelector("td:nth-child(1) p:nth-child(6) > input")).getAttribute("value");
            assertThat(value, is("ОК"));
        }
        {
            String value = driver.findElement(By.cssSelector("form:nth-child(3) > p > input")).getAttribute("value");
            assertThat(value, is("Отмена"));
        }
    }

}
