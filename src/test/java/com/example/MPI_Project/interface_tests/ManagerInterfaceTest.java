package com.example.MPI_Project.interface_tests;// Generated by Selenium IDE

import com.example.MPI_Project.testHelpers.AuthTestHelper;
import com.example.MPI_Project.testHelpers.TestUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class ManagerInterfaceTest {
    private WebDriver driver;

    @Before
    public void setUp() {
        driver = TestUtils.getDriver();
        AuthTestHelper.auth(driver,"manager", "manager");
    }

    @After
    public void tearDown() {
        driver.findElement(By.name("exitButton")).click();
        driver.findElement(By.name("task_logoutButton")).click();
        driver.findElement(By.name("exitButton")).click();
        driver.quit();
    }

    @Test
    public void basicInterfaceTest() {
        driver.findElement(By.name("task_managButton")).click();
        driver.findElement(By.cssSelector("tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1)")).click();
        assertThat(driver.findElement(By.cssSelector("tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1)")).getText(), is("Управляющий"));
        driver.findElement(By.cssSelector("tr:nth-child(2) p")).click();
        assertThat(driver.findElement(By.cssSelector("tr:nth-child(2) strong")).getText(), is("Текущие задачи"));
        driver.findElement(By.cssSelector("th:nth-child(1)")).click();
        assertThat(driver.findElement(By.cssSelector("th:nth-child(1)")).getText(), is("ИД"));
        driver.findElement(By.cssSelector("th:nth-child(2)")).click();
        assertThat(driver.findElement(By.cssSelector("th:nth-child(2)")).getText(), is("Наименование"));
        driver.findElement(By.cssSelector("th:nth-child(3)")).click();
        assertThat(driver.findElement(By.cssSelector("th:nth-child(3)")).getText(), is("Статус"));
        {
            String value = driver.findElement(By.name("exitButton")).getAttribute("value");
            assertThat(value, is("Выход"));
        }
        driver.findElement(By.cssSelector("tr:nth-child(1) > .colTask:nth-child(2)")).click();
        assertThat(driver.findElement(By.cssSelector("tr:nth-child(1) span")).getText(), is("Отредактированная задача"));
        driver.findElement(By.cssSelector("tr:nth-child(1) i")).click();
        assertThat(driver.findElement(By.cssSelector("tr:nth-child(1) i")).getText(), is("Возникли проблемы"));
        assertThat(driver.findElement(By.name("task_deleteButton")).getText(), is("Удалить"));
        assertThat(driver.findElement(By.name("task_changeButton")).getText(), is("Просмотр и редактирование"));
    }

    @Test
    public void createTaskInterfaceTest() {
        driver.findElement(By.name("task_managButton")).click();
        driver.findElement(By.cssSelector("td:nth-child(2) > p")).click();
        assertThat(driver.findElement(By.cssSelector("td:nth-child(2) strong")).getText(), is("Новая задача"));
        assertThat(driver.findElement(By.cssSelector("td:nth-child(2) p:nth-child(2)")).getText(), is("Дедлайн:"));
        assertThat(driver.findElement(By.cssSelector("p:nth-child(3) > label:nth-child(2)")).getText(), is("Утверждено"));
        assertTrue(driver.findElement(By.cssSelector("p:nth-child(3) > #taskStatus_submitted")).isSelected());
        assertThat(driver.findElement(By.cssSelector("p:nth-child(3) > label:nth-child(4)")).getText(), is("Готово"));
        assertFalse(driver.findElement(By.cssSelector("p:nth-child(3) > #taskStatus_ready")).isSelected());
        assertThat(driver.findElement(By.cssSelector("p:nth-child(3) > label:nth-child(6)")).getText(), is("В процессе"));
        assertFalse(driver.findElement(By.cssSelector("p:nth-child(3) > #taskStatus_wip")).isSelected());
        assertThat(driver.findElement(By.cssSelector("p:nth-child(3) > label:nth-child(8)")).getText(), is("Возникли проблемы"));
        assertFalse(driver.findElement(By.cssSelector("p:nth-child(3) > #taskStatus_problems")).isSelected());
        assertThat(driver.findElement(By.cssSelector("p:nth-child(3) > label:nth-child(10)")).getText(), is("Приостановлено"));
        assertFalse(driver.findElement(By.cssSelector("p:nth-child(3) > #taskStatus_stopped")).isSelected());
        {
            String value = driver.findElement(By.cssSelector("td:nth-child(2) p:nth-child(6) > input:nth-child(1)")).getAttribute("value");
            assertThat(value, is("ОК"));
        }
        {
            String value = driver.findElement(By.cssSelector("input:nth-child(2)")).getAttribute("value");
            assertThat(value, is("Отмена"));
        }
        {
            WebElement element = driver.findElement(By.name("newTask_description"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        driver.findElement(By.name("newTask_deadline")).click();
        {
            WebElement element = driver.findElement(By.name("newTask_deadline"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        driver.findElement(By.name("newTask_workman")).click();
        {
            WebElement element = driver.findElement(By.name("newTask_workman"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        driver.findElement(By.name("newTask_name")).click();
        {
            WebElement element = driver.findElement(By.name("newTask_name"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        driver.findElement(By.name("newTask_deadline")).click();
        driver.findElement(By.name("newTask_deadline")).click();
        driver.findElement(By.cssSelector("body")).click();
        driver.findElement(By.cssSelector("input:nth-child(2)")).click();
    }

    @Test
    public void editTaskInterfaceTest() {
        driver.findElement(By.name("task_managButton")).click();
        driver.findElement(By.cssSelector("tr:nth-child(1) > .colTask .colTask")).click();
        driver.findElement(By.name("task_changeButton")).click();
        assertThat(driver.findElement(By.cssSelector("tr:nth-child(3) > td:nth-child(1) strong")).getText(), is("Редактировать задачу"));
        driver.findElement(By.name("task_name")).click();
        {
            String value = driver.findElement(By.name("task_name")).getAttribute("value");
            assertThat(value, is("Отредактированная задача"));
        }
        driver.findElement(By.name("task_deadline")).click();
        driver.findElement(By.cssSelector("td:nth-child(1) > form:nth-child(2)")).click();
        driver.findElement(By.name("task_deadline")).click();
        {
            String value = driver.findElement(By.name("task_deadline")).getAttribute("value");
            assertThat(value, is("2021-12-05"));
        }
        driver.findElement(By.cssSelector("td:nth-child(1) p:nth-child(3)")).click();
        assertThat(driver.findElement(By.cssSelector("td:nth-child(1) p:nth-child(3)")).getText(), is("Дедлайн:"));
        driver.findElement(By.cssSelector("td:nth-child(1) > form:nth-child(2)")).click();
        driver.findElement(By.cssSelector("p:nth-child(4) > label:nth-child(2)")).click();
        assertThat(driver.findElement(By.cssSelector("p:nth-child(4) > label:nth-child(2)")).getText(), is("Утверждено"));
        assertTrue(driver.findElement(By.id("taskStatus_submitted")).isSelected());
        assertThat(driver.findElement(By.cssSelector("p:nth-child(4) > label:nth-child(4)")).getText(), is("Готово"));
        assertFalse(driver.findElement(By.id("taskStatus_ready")).isSelected());
        assertThat(driver.findElement(By.cssSelector("p:nth-child(4) > label:nth-child(6)")).getText(), is("В процессе"));
        assertFalse(driver.findElement(By.id("taskStatus_wip")).isSelected());
        assertThat(driver.findElement(By.cssSelector("p:nth-child(4) > label:nth-child(8)")).getText(), is("Возникли проблемы"));
        assertFalse(driver.findElement(By.id("taskStatus_problems")).isSelected());
        assertThat(driver.findElement(By.cssSelector("p:nth-child(4) > label:nth-child(10)")).getText(), is("Приостановлено"));
        assertFalse(driver.findElement(By.id("taskStatus_stopped")).isSelected());
        driver.findElement(By.name("task_description")).click();
        {
            String value = driver.findElement(By.name("task_description")).getAttribute("value");
            assertThat(value, is("Отредактированное описание тестовой задачи"));
        }
        driver.findElement(By.name("task_workman")).click();
        {
            String value = driver.findElement(By.name("task_workman")).getAttribute("value");
            assertThat(value, is("workman"));
        }
        {
            WebElement element = driver.findElement(By.name("task_description"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        driver.findElement(By.name("task_deadline")).click();
        {
            WebElement element = driver.findElement(By.name("task_deadline"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        driver.findElement(By.name("task_workman")).click();
        {
            WebElement element = driver.findElement(By.name("task_workman"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        driver.findElement(By.name("task_name")).click();
        {
            WebElement element = driver.findElement(By.name("task_name"));
            Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
            assertTrue(isEditable);
        }
        {
            String value = driver.findElement(By.cssSelector("p:nth-child(7) > input")).getAttribute("value");
            assertThat(value, is("ОК"));
        }
        {
            String value = driver.findElement(By.cssSelector("form:nth-child(3) input")).getAttribute("value");
            assertThat(value, is("Отмена"));
        }
        driver.findElement(By.cssSelector("form:nth-child(3) input")).click();
    }

}
